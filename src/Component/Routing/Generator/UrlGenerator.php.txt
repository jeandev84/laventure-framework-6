<?php
namespace Laventure\Component\Routing\Generator;

use Laventure\Component\Routing\RouterInterface;


/**
 * @UrlGenerator
 *
 * @author Jean-Claude <jeanyao@ymail.com>
 *
 * @license https://github.com/jeandev84/laventure-framework/blob/master/LICENSE
 *
 * @package Laventure\Component\Routing\Generator
*/
class UrlGenerator implements UrlGeneratorInterface
{

    /**
     * @var RouterInterface
    */
    protected $router;



    /**
     * @param RouterInterface $router
    */
    public function __construct(RouterInterface $router)
    {
         $this->router = $router;
    }




    /**
     * @inheritDoc
    */
    public function generateUrl(string $name, array $parameters = [], int $referenceType = self::ABSOLUTE_URL)
    {
         if (! $path = $this->router->generate($name, $parameters)) {
              return $this->generateNativeURL($name, $parameters);
         }

         return [
            self::ABSOLUTE_URL  => $this->generateNativeURL($path),
            self::ABSOLUTE_PATH => '',
            self::RELATIVE_PATH => $path,
            self::NETWORK_PATH  => '',
         ][$referenceType];
    }



    
    /**
     * @param string $path
     * 
     * @param array $parameters
     *
     * @return string
    */
    private function generateNativeURL(string $path, array $parameters = []): string
    {
        return sprintf('%s%s%s', $this->networkDomain, trim($path, '\\/'), $this->buildQueryParams($parameters));
    }




    /**
     * @param string $path
     *
     * @return void
    */
    private function generate(string $path)
    {

    }


    /**
     * @param array $parameters
     *
     * @return string
    */
    private function buildQueryParams(array $parameters): string
    {
        $this->queries = array_merge($this->queries, $parameters);

        return http_build_query($this->queries);
    }




    /**
     * @return array
    */
    public function getQueryParams(): array
    {
         return $this->queries;
    }
}