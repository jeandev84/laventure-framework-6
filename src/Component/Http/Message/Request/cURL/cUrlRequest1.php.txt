<?php
namespace Laventure\Component\Http\Message\Request\cURL;


use Laventure\Component\Http\Bag\ParameterBag;
use Laventure\Component\Http\Message\Request\Contract\ServerRequestInterface;
use Laventure\Component\Http\Message\Request\Contract\UriInterface;
use Laventure\Component\Http\Message\Request\Uri;
use Laventure\Component\Http\Message\StreamInterface;


/**
 * @cUrlRequest
 *
 * @link https://www.php.net/manual/en/function.parse-url.php
 *
 * @author Jean-Claude <jeanyao@ymail.com>
 *
 * @license https://github.com/jeandev84/laventure-framework/blob/master/LICENSE
 *
 * @package Laventure\Component\Http\Message\cUrlRequest\cURL
*/
class cUrlRequest implements ServerRequestInterface
{


    /**
     * @var \CurlHandle
    +*/
    protected $ch;


    /**
     * @var ParameterBag
    */
    protected ParameterBag $parameterBag;


    /**
     * @var array
    */
    protected $options = [
        CURLOPT_RETURNTRANSFER => 1,
        CURLOPT_HEADER => 0,
        CURLOPT_FOLLOWLOCATION => 1
    ];




    /**
     * @param $url
    */
    public function __construct($url = null)
    {
         $this->init($url);
    }




    /**
     * @param string|null $url
     *
     * @return $this
    */
    public function init(string $url = null): static
    {
        $this->ch = curl_init($url);

        $this->setOptions($this->options);

        $this->parameterBag->merge(compact('url'));

        return $this;
    }





    /**
     * @param string $url
     *
     * @return $this
    */
    public function setUrl(string $url): static
    {
        $this->setOption(CURLOPT_URL, $url);

        $this->parameterBag->merge(compact('url'));

        return $this;
    }





    /**
     * @param string $method
     *
     * @return $this
    */
    public function setMethod(string $method): static
    {
        return $this;
    }





    /**
     * @param $key
     *
     * @param $value
     *
     * @return $this
    */
    public function setOption($key, $value): static
    {
        curl_setopt($this->ch, $key, $value);

        $this->options[$key] = $value;

        return $this;
    }




    /**
     * @param array $options
     *
     * @return $this
    */
    public function setOptions(array $options): static
    {
         curl_setopt_array($this->ch, $options);

         $this->options = array_merge($this->options, $options);

         return $this;
    }





    /**
     * @inheritDoc
    */
    public function getProtocolVersion()
    {
        // TODO: Implement getProtocolVersion() method.
    }



    /**
     * @inheritDoc
    */
    public function withProtocolVersion($version)
    {
        // TODO: Implement withProtocolVersion() method.
    }

    /**
     * @inheritDoc
     */
    public function getHeaders()
    {
        // TODO: Implement getHeaders() method.
    }

    /**
     * @inheritDoc
     */
    public function hasHeader($name)
    {
        // TODO: Implement hasHeader() method.
    }

    /**
     * @inheritDoc
    */
    public function getHeader($name)
    {
        // TODO: Implement getHeader() method.
    }



    /**
     * @inheritDoc
    */
    public function getHeaderLine($name)
    {
        // TODO: Implement getHeaderLine() method.
    }



    /**
     * @inheritDoc
    */
    public function withHeader($name, $value)
    {
        // TODO: Implement withHeader() method.
    }



    /**
     * @inheritDoc
    */
    public function withAddedHeader($name, $value)
    {
        // TODO: Implement withAddedHeader() method.
    }




    /**
     * @inheritDoc
    */
    public function withoutHeader($name)
    {
        // TODO: Implement withoutHeader() method.
    }

    /**
     * @inheritDoc
    */
    public function getBody()
    {
        // TODO: Implement getBody() method.
    }



    /**
     * @inheritDoc
    */
    public function withBody(StreamInterface $body)
    {
        // TODO: Implement withBody() method.
    }




    /**
     * @inheritDoc
    */
    public function url()
    {
        return $this->parameterBag->get('url');
    }



    /**
     * @inheritDoc
    */
    public function withRequestTarget($requestTarget)
    {
         $this->parameterBag->merge(compact('requestTarget'));

         return $this;
    }




    /**
     * @inheritDoc
     */
    public function getMethod()
    {
        // TODO: Implement getMethod() method.
    }



    /**
     * @inheritDoc
    */
    public function withMethod($method)
    {
        // TODO: Implement withMethod() method.
    }



    /**
     * @inheritDoc
     */
    public function getUrl()
    {
        // TODO: Implement getUrl() method.
    }

    /**
     * @inheritDoc
     */
    public function withUri(UriInterface $uri, $preserveHost = false)
    {
        // TODO: Implement withUri() method.
    }

    /**
     * @inheritDoc
     */
    public function getServerParams()
    {
        // TODO: Implement getServerParams() method.
    }

    /**
     * @inheritDoc
     */
    public function getCookieParams()
    {
        // TODO: Implement getCookieParams() method.
    }

    /**
     * @inheritDoc
     */
    public function withCookieParams(array $cookies)
    {
        // TODO: Implement withCookieParams() method.
    }

    /**
     * @inheritDoc
     */
    public function getQueryParams()
    {
        // TODO: Implement getQueryParams() method.
    }

    /**
     * @inheritDoc
     */
    public function withQueryParams(array $query)
    {
        // TODO: Implement withQueryParams() method.
    }

    /**
     * @inheritDoc
     */
    public function getUploadedFiles()
    {
        // TODO: Implement getUploadedFiles() method.
    }

    /**
     * @inheritDoc
     */
    public function withUploadedFiles(array $uploadedFiles)
    {
        // TODO: Implement withUploadedFiles() method.
    }

    /**
     * @inheritDoc
     */
    public function getParsedBody()
    {
        // TODO: Implement getParsedBody() method.
    }

    /**
     * @inheritDoc
     */
    public function withParsedBody($data)
    {
        // TODO: Implement withParsedBody() method.
    }



    /**
     * @inheritDoc
    */
    public function getAttributes()
    {
        // TODO: Implement getAttributes() method.
    }




    /**
     * @inheritDoc
    */
    public function getAttribute($name, $default = null)
    {
        // TODO: Implement getAttribute() method.
    }





    /**
     * @inheritDoc
    */
    public function withAttribute($name, $value)
    {
        // TODO: Implement withAttribute() method.
    }



    /**
     * @inheritDoc
    */
    public function withoutAttribute($name)
    {
        // TODO: Implement withoutAttribute() method.
    }



    /**
     * @return ParameterBag
    */
    public function exec()
    {
        $result = curl_exec($this->ch);

        $this->parameterBag->merge(compact('result'));

        return $this->parameterBag;
    }




    /**
     * @param string $url
     *
     * @param string|null $method
     *
     * @param array $context
     *
     * @return $this
    */
    public static function create(string $url, string $method = null, array $context = []): static
    {
          $request = new static();
          $request->withMethod($method);
          $request->withUri(new Uri($url));

          return $request;
    }
}